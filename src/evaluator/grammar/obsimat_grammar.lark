%ignore "\\middle"

// ignore escaped whitespace in latex code
%ignore /(?<!\\)\\ /

// fix function calls
%override exponential: FUNC_EXP _expression_func

%override log: FUNC_LOG _expression_func
    | FUNC_LN _expression_func
    | FUNC_LG _expression_func
    | FUNC_LOG UNDERSCORE (DIGIT | _one_letter_symbol) _expression_func
    | FUNC_LOG UNDERSCORE group_curly_parentheses _expression_func


// Fix all these functions being WAY too greedy with what they considered arguments.
// before the latex string \\sin(a) - b could be parsed to sin(a-b), this prevents that. 
%override sin: FUNC_SIN _expression_func
%override cos: FUNC_COS _expression_func
%override tan: FUNC_TAN _expression_func
%override csc: FUNC_CSC _expression_func
%override sec: FUNC_SEC _expression_func
%override cot: FUNC_COT _expression_func

%override sin_power: FUNC_SIN CARET _expression_func _expression_func
%override cos_power: FUNC_COS CARET _expression_func _expression_func
%override tan_power: FUNC_TAN CARET _expression_func _expression_func
%override csc_power: FUNC_CSC CARET _expression_func _expression_func
%override sec_power: FUNC_SEC CARET _expression_func _expression_func
%override cot_power: FUNC_COT CARET _expression_func _expression_func

%override sinh: FUNC_SINH _expression_func
%override cosh: FUNC_COSH _expression_func
%override tanh: FUNC_TANH _expression_func

%override arcsin: FUNC_ARCSIN _expression_func
%override arccos: FUNC_ARCCOS _expression_func
%override arctan: FUNC_ARCTAN _expression_func
%override arccsc: FUNC_ARCCSC _expression_func
%override arcsec: FUNC_ARCSEC _expression_func
%override arccot: FUNC_ARCCOT _expression_func

%override asinh: FUNC_ARSINH _expression_func
%override acosh: FUNC_ARCOSH _expression_func
%override atanh: FUNC_ARTANH _expression_func

// fix implicit multiplication not working in cases after explicit multiplication,
// functions, or matricies.

// need to override the whole thing here, as the first part of the rule needed to be modified,
// and fixing it with an extension would lead to an ambigiouity whenever this case was encountered. 
%override adjacent_expressions: _expression_power _expression_mul
    | group_round_parentheses (group_round_parentheses | _one_letter_symbol)
    | _function _function
    | fraction _expression_mul

%extend mul: _expression_mul MUL_SYMBOL adjacent_expressions
// %extend div: _expression_mul MUL_SYMBOL adjacent_expressions

// add mathematical constants
PI: "\\pi"
EULER: "e"
TAU: "\\tau"
IMAGINARY_CONSTANT: "i" // note: this is already present as CMD_IMAGINARY_UNIT, but it is prioritized way too low, so it is also added as a constant.

MATH_CONSTANTS: PI | EULER | TAU | IMAGINARY_CONSTANT

math_constant.1: MATH_CONSTANTS
%extend _atomic_expr: math_constant 

// add the standard matrix norm function
NORM: "\\Vert" | "\\lVert" | "\\rVert"
matrix_norm: NORM matrix NORM
%extend _function: matrix_norm

// add the standard matrix inner product function
matrix_inner_product.1: CMD_LANGLE matrix BAR matrix CMD_RANGLE
%extend _function: matrix_inner_product
// remove the physics inner product...
%override inner_product: /a^/

// add quick hand notation for differentiating expressions
// e.g. (x^2)' -> 2x
%override matrix_prime: matrix PRIMES
quick_derivative: group_round_parentheses PRIMES
%extend _function: quick_derivative


// multi expression environments
ALIGN_ENV: L_BRACE "align" R_BRACE
CASES_ENV: L_BRACE "cases" R_BRACE 

CMD_BEGIN_ALIGN: CMD_BEGIN ALIGN_ENV
CMD_BEGIN_CASES: CMD_BEGIN CASES_ENV
CMD_END_ALIGN: CMD_END ALIGN_ENV
CMD_END_CASES: CMD_END CASES_ENV

system_of_expressions: CMD_BEGIN_ALIGN system_of_expressions_body CMD_END_ALIGN | CMD_BEGIN_CASES system_of_expressions_body CMD_END_CASES
// the body should contain any latex parsable string separated by \\ character groups.
// the only issue is there may be alignment characters mixed inbetween these strings,
// so we need to capture the raw string itself, so we can filter out these alignment characters,
// and reparse the individual latex strings.
system_of_expressions_body: /[\S][\S\s]+?(?=\\\\|\\end)/ (MATRIX_ROW_DELIM /[\S][\S\s]+?(?=\\\\|\\end)/)* (MATRIX_ROW_DELIM)?

%extend latex_string: system_of_expressions

// Partial relations, that is relations which are missing a left or right side
// eg. = 5, 25 < and so on...
_partial_eq: EQUAL _expression | _expression EQUAL
_partial_ne: NOT_EQUAL _expression | _expression NOT_EQUAL
_partial_lt: LT _expression | _expression LT
_partial_lte: LTE _expression | _expression LTE
_partial_gt: GT _expression | _expression GT
_partial_gte: GTE _expression | _expression GTE

partial_relation: _partial_eq | _partial_ne | _partial_lt | _partial_lte | _partial_gt | _partial_gte

%extend latex_string: partial_relation
